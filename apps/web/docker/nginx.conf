user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

# Import the JavaScript module
load_module /usr/lib/nginx/modules/ngx_http_js_module.so;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    upstream metadata_server {
        # server host.docker.internal:3000; # Development (Docker for Mac)
        server api:3000; # Production
    }

    # Load the JavaScript file
    js_import decode from decode.js;

    server {
        listen 80;
        server_name _;

        gzip on;
        gzip_disable "msie6";

        gzip_comp_level 6;
        gzip_min_length 1100;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_types
            text/plain
            text/css
            text/js
            text/xml
            text/javascript
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            image/svg+xml/javascript;

        root /usr/share/nginx/html;

        # Virtual endpoint to fetch metadata
        location = @metadata {
            internal;

            # proxy pass host to the metadata server
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://metadata_server/api/metadata?uri=$request_uri;
        }

        # Match hashed assets and set cache control to immutable
        location ~ "^/assets/(?<filename>.+)\-(?<hash>[\w\-]{8})\.(?<extension>\w+)$" {
            expires 1y;
            # Cache-Control: public, immutable, stale-while-revalidate: 1 year, stale-if-error: 1 year
            add_header Cache-Control "public, immutable, stale-while-revalidate=31536000, stale-if-error=31536000";
            add_header X-Hash-Match $hash;
        }

        # Match locales and set cache control to 10 minutes
        location /locales {
            expires 30s;

            # Cache-Control: public, stale-while-revalidate: 1 day, stale-if-error: 1 day
            add_header Cache-Control "public, stale-while-revalidate=86400, stale-if-error=86400";
        }

        # Set the expires header to 30 minutes for all other files
        location ~ ".*(\.).*$" {
            access_log off;
            expires 30m;
        }

        # Match the index.html and set the metadata
        location / {
            try_files /index.html =404;

            # Call the metadata request and set the title
            auth_request @metadata;
            auth_request_set $title64  $upstream_http_x_title;
            auth_request_set $desc64   $upstream_http_x_description;
            auth_request_set $locale $upstream_http_x_locale;
            auth_request_set $image  $upstream_http_x_image;
            auth_request_set $type   $upstream_http_x_type; # https://ogp.me/#types

            # Decode the base64 encoded title and description
            js_set $title decode.title;
            js_set $desc decode.desc;

            # Debugging headers
            add_header X-Index-Match "true" always;

            # Set the expires header to 30 seconds
            expires 30s;

            # Replace the title with the response from the metadata request
            # For more information see
            #  - http://nginx.org/en/docs/http/ngx_http_sub_module.html
            #  - https://developer.x.com/en/docs/x-for-websites/cards/overview/markup
            #  - https://socialsharepreview.com/
            #  - https://ogp.me/
            sub_filter_types text/html;
            sub_filter '<title>Plan B Network</title>' "
                <title>$title</title>
                <meta name=\"description\" content=\"$desc\" />
                <meta property=\"og:title\" content=\"$title\" />
                <meta property=\"twitter:title\" content=\"$title\" />
                <meta property=\"og:description\" content=\"$desc\" />
                <meta property=\"twitter:description\" content=\"$desc\" />
                <meta property=\"og:locale\" content=\"$locale\" />
                <meta property=\"og:image\" content=\"$image\" />
                <meta property=\"twitter:image\" content=\"$image\" />
                <meta property=\"twitter:card\" content=\"summary\" />
                <meta property=\"og:type\" content=\"$type\" />
            ";
        }
    }
}
